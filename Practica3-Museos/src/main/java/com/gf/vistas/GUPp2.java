/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.gf.vistas;

import com.gf.controles.Juego2;
import com.gf.dao.Dao;
import com.gf.modelos.Museos;
import java.awt.Color;
import java.awt.Component;
import java.awt.FlowLayout;
import java.awt.GridLayout;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author Eduardo
 */
public class GUPp2 extends javax.swing.JFrame {

    /**
     * Creates new form GUPp2
     */
    private static final Dao dao = new Dao();
    private static final Juego2 juego2 = new Juego2(dao);
    private static final int MAX_SELECTIONS = 3; // Número máximo de selecciones permitidas
    private int currentSelections = 0; // Contador de selecciones actuales
    JPanel panelContenedor = new JPanel(new GridLayout(0,1));
    JButton btnComprobar = new JButton("Comprobar");
    
    

    public GUPp2() {
        initComponents();
        setFrame();
        creacion();

    }

    private void setFrame() {
        setTitle("Selección de checkboxes");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setSize(300, 200);
        setLayout(new FlowLayout());
        this.setContentPane(panelContenedor);
        
        btnComprobar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                comprobarSeleccionados();
            }
        });
    }

   private void creacion() {
    List<Museos> nombresObrasArte = dao.getMuseos(); // Obtener los nombres de las obras de arte desde la base de datos
    
    for (String museo : juego2.getNombresMuseos()) {
        JCheckBox checkBoxMuseo = new JCheckBox(museo);
        panelContenedor.add(checkBoxMuseo);

        checkBoxMuseo.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JCheckBox selectedCheckbox = (JCheckBox) e.getSource();
                String nombreObraArte = selectedCheckbox.getText();
                
                if (selectedCheckbox.isSelected()) {
                    currentSelections++;
                    if (currentSelections >= MAX_SELECTIONS) {
                        disableRemainingCheckboxes();
                    }
                } else {
                    currentSelections--;
                    enableAllCheckboxes();
                }
                
                // Comprobar si el nombre de la checkbox coincide con la base de datos
                if (nombresObrasArte.contains(selectedCheckbox)) {
                    JOptionPane.showMessageDialog(null, "Los cuadros seleccionados son correctos");
                } else {
                    JOptionPane.showMessageDialog(null, "Los cuadros seleccionados no son correctos");
                }
            }
        });
        panelContenedor.add(btnComprobar);
    }
}


    private void disableRemainingCheckboxes() {
        Component[] components = panelContenedor.getComponents();
        for (Component component : components) {
            if (component instanceof JCheckBox) {
                JCheckBox checkbox = (JCheckBox) component;
                if (!checkbox.isSelected()) {
                    checkbox.setEnabled(false);
                }
            }
        }
    }

    private void enableAllCheckboxes() {
        Component[] components = panelContenedor.getComponents();
        for (Component component : components) {
            if (component instanceof JCheckBox) {
                JCheckBox checkbox = (JCheckBox) component;
                checkbox.setEnabled(true);
            }
        }
    }
    
    private void comprobarSeleccionados() {
        Component[] components = panelContenedor.getComponents();
        for (Component component : components) {
            if (component instanceof JCheckBox) {
                JCheckBox checkbox = (JCheckBox) component;
                if (checkbox.isSelected()) {
                    checkbox.setBackground(Color.GREEN);
                } else {
                    checkbox.setBackground(null);
                }
            }
        }
    }
    
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUPp2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUPp2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUPp2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUPp2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUPp2().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
